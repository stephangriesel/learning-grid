/* MDN doc: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout */

/* ############################################################### */

/* .wrapper {
    background:#777;
    display:grid; 
    
    /* We create a grid container by declaring display: grid or display: inline-grid on an element. As soon as we do this all direct children of that element will become grid items. */
    
    /* grid-template-columns: 1fr 1fr 1fr; 
    
    /* We define rows and columns on our grid with the grid-template-columns and grid-template-rows properties. These define grid tracks. A grid track is the space between any two lines on the grid. In the below image you can see a track highlighter – the first row track in our grid. */
    
    /* ### fr unit ###
    /* Tracks can be defined using any length unit. Grid also introduces an additional length unit to help us create flexible grid tracks. The new fr unit represents a fraction of the available space in the grid container.  */
    
    /* grid-auto-rows:minmax(100px,auto)
    
    /* ### grid-auto-rows ###
    /* When creating our example grid we defined our column tracks with the grid-template-columns property, but let grid create rows as needed for the content. These rows are created in the implicit grid. The explicit grid consists of the rows and columns you define with grid-template-columns and grid-template-rows. If you place something outside of that defined grid, or due to the amount of content more grid tracks are needed, then grid creates rows and columns in the implicit grid. These tracks will be auto-sized by default, so will size based on the content inside them.
    You can also define a set size for tracks created in the implicit grid with the grid-auto-rows and grid-auto-columns properties.
    In the below example we use grid-auto-rows to ensure that tracks created in the implicit grid are 200 pixels tall.*/
    
    /* ### minmax() ####
    /* When setting up an explicit grid or defining the sizing for automatically created rows or columns we may want to give tracks a minimum size, but ensure they expand to fit any content that is added. For example, I may want my rows to never collapse smaller than 100 pixels, but if my content stretches to 300 pixels in height I would like the row to stretch to that height.
    
    Grid has a solution for this with the minmax() function. In this next example I am using minmax()in the value of grid-auto-rows. Automatically created rows will be a minimum of 100 pixels tall, and a maximum of auto. Using auto means that the size will look at the content size and so stretch to give space for the tallest thing in a cell in this row. */

/* ############################################################### */

/* ### Positioning items against lines */

/* .wrapper { 
    display: grid; 
    grid-template-columns: repeat(3, 1fr); 
    grid-auto-rows: 100px; 
} 
.box1 { 
    background-color: #987;
    grid-column-start: 1; 
    grid-column-end: 4; 
    grid-row-start: 1; 
    grid-row-end: 3; 
} 
.box2 { 
    background-color: #667;
    grid-column-start: 1; 
    grid-row-start: 3; 
    grid-row-end: 5; 
} */

/*

We will be exploring line based placement in full detail in a later article, the following example demonstrates doing this in a simple way. When placing an item we target the line – rather than the track.

In the following example I am placing the first two items on our three column track grid, using the grid-column-start, grid-column-end, grid-row-start and grid-row-end properties. Working from left to right, the first item is placed against column line 1, and spans to column line 4, which in our case is the far right line on the grid. It begins at row line 1 and ends at row line 3, therefore spanning two row tracks.

The second item starts on grid column line 1, and spans one track. This is the default so I do not need to specify the end line. It also spans two row tracks from row line 3 to row line 5. The other items will place themselves into empty spaces on the grid.

*/

/* ############################################################### */

/* ### GUTTERS #### 

Gutters or alleys between grid cells can be created using the grid-column-gap and grid-row-gap properties, or the shorthand grid-gap. In the below example I am creating a 10-pixel gap between columns and a 1em gap between rows. 

*/

/* .wrapper {
    background-color: #923;
   display: grid;
   grid-template-columns: repeat(3, 1fr);
   grid-column-gap: 10px;
   grid-row-gap: 10em;
} */

/* ############################################################### */

/* Nesting grids */

/* .box1 {
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   display: grid;
   grid-template-columns: repeat(3, 1fr);
}

.nested {
    background-color: pink;
} */

/* Subgrid */

/* .box1 {
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   display: subgrid;
} */

/* ############################################################### */

/* Layering items with z-index */

/* .wrapper {
   display: grid;
   grid-template-columns: repeat(3, 1fr);
   grid-auto-rows: 100px;
}
.box1 {
    background-color: red;
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   z-index: 1;
}
.box2 {
    background-color:purple;
   grid-column-start: 1;
   grid-row-start: 2;
   grid-row-end: 4;
   z-index: 2;
} */

/* ############################################################### */

/* Grid and flexbox */

/* The basic difference between CSS Grid Layout and CSS Flexbox Layout is that flexbox was designed for layout in one dimension, layout in a row or a column. Grid was designed for two-dimensional layout, layout in rows and columns at the same time. The two specifications share some common features however and if you have already learned how to use flexbox you will hopefully see similarities that help you get to grips with Grid. */

/* One-dimensional vs. two-dimensional layout

A simple example can demonstrate the difference between one- and two-dimensional layout.

In this first example I am using flexbox to lay out a set of boxes. I have five child items in my container, and I have given the flex properties values so that they can grow and shrink from a flex-basis of 200 pixels.

I have also set the flex-wrap property to wrap, so that if the space in the container becomes too narrow to maintain the flex basis, items will wrap onto a new row.*/

/* .wrapper {
   display: flex;
   flex-wrap: wrap;
}
.wrapper > div {
    background-color: red;
   flex: 1 1 200px;
} */

/* The same layout with CSS grids

In this next example I create the same layout using Grid. This time we have three 1fr column tracks. We do not need to set anything on the items themselves, they will lay themselves out one into each cell of the created grid. As you can see they stay in a strict grid, lining up in rows and columns. With five items, we get a gap on the end of row two.*/

.wrapper {
   display: grid;
   grid-template-columns: repeat(3, 1fr);
}


