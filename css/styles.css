/* MDN doc: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout */

/* ############################################################### */

/* .wrapper {
    background:#777;
    display:grid; 
    
    /* We create a grid container by declaring display: grid or display: inline-grid on an element. As soon as we do this all direct children of that element will become grid items. */
    
    /* grid-template-columns: 1fr 1fr 1fr; 
    
    /* We define rows and columns on our grid with the grid-template-columns and grid-template-rows properties. These define grid tracks. A grid track is the space between any two lines on the grid. In the below image you can see a track highlighter – the first row track in our grid. */
    
    /* ### fr unit ###
    /* Tracks can be defined using any length unit. Grid also introduces an additional length unit to help us create flexible grid tracks. The new fr unit represents a fraction of the available space in the grid container.  */
    
    /* grid-auto-rows:minmax(100px,auto)
    
    /* ### grid-auto-rows ###
    /* When creating our example grid we defined our column tracks with the grid-template-columns property, but let grid create rows as needed for the content. These rows are created in the implicit grid. The explicit grid consists of the rows and columns you define with grid-template-columns and grid-template-rows. If you place something outside of that defined grid, or due to the amount of content more grid tracks are needed, then grid creates rows and columns in the implicit grid. These tracks will be auto-sized by default, so will size based on the content inside them.
    You can also define a set size for tracks created in the implicit grid with the grid-auto-rows and grid-auto-columns properties.
    In the below example we use grid-auto-rows to ensure that tracks created in the implicit grid are 200 pixels tall.*/
    
    /* ### minmax() ####
    /* When setting up an explicit grid or defining the sizing for automatically created rows or columns we may want to give tracks a minimum size, but ensure they expand to fit any content that is added. For example, I may want my rows to never collapse smaller than 100 pixels, but if my content stretches to 300 pixels in height I would like the row to stretch to that height.
    
    Grid has a solution for this with the minmax() function. In this next example I am using minmax()in the value of grid-auto-rows. Automatically created rows will be a minimum of 100 pixels tall, and a maximum of auto. Using auto means that the size will look at the content size and so stretch to give space for the tallest thing in a cell in this row. */

/* ############################################################### */

/* ### Positioning items against lines */

/* .wrapper { 
    display: grid; 
    grid-template-columns: repeat(3, 1fr); 
    grid-auto-rows: 100px; 
} 
.box1 { 
    background-color: #987;
    grid-column-start: 1; 
    grid-column-end: 4; 
    grid-row-start: 1; 
    grid-row-end: 3; 
} 
.box2 { 
    background-color: #667;
    grid-column-start: 1; 
    grid-row-start: 3; 
    grid-row-end: 5; 
} */

/*

We will be exploring line based placement in full detail in a later article, the following example demonstrates doing this in a simple way. When placing an item we target the line – rather than the track.

In the following example I am placing the first two items on our three column track grid, using the grid-column-start, grid-column-end, grid-row-start and grid-row-end properties. Working from left to right, the first item is placed against column line 1, and spans to column line 4, which in our case is the far right line on the grid. It begins at row line 1 and ends at row line 3, therefore spanning two row tracks.

The second item starts on grid column line 1, and spans one track. This is the default so I do not need to specify the end line. It also spans two row tracks from row line 3 to row line 5. The other items will place themselves into empty spaces on the grid.

*/

/* ############################################################### */

/* ### GUTTERS #### 

Gutters or alleys between grid cells can be created using the grid-column-gap and grid-row-gap properties, or the shorthand grid-gap. In the below example I am creating a 10-pixel gap between columns and a 1em gap between rows. 

*/

/* .wrapper {
    background-color: #923;
   display: grid;
   grid-template-columns: repeat(3, 1fr);
   grid-column-gap: 10px;
   grid-row-gap: 10em;
} */

/* ############################################################### */

/* Nesting grids */

/* .box1 {
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   display: grid;
   grid-template-columns: repeat(3, 1fr);
}

.nested {
    background-color: pink;
} */

/* Subgrid */

/* .box1 {
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   display: subgrid;
} */

/* ############################################################### */

/* Layering items with z-index */

/* .wrapper {
   display: grid;
   grid-template-columns: repeat(3, 1fr);
   grid-auto-rows: 100px;
}
.box1 {
    background-color: red;
   grid-column-start: 1;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   z-index: 1;
}
.box2 {
    background-color:purple;
   grid-column-start: 1;
   grid-row-start: 2;
   grid-row-end: 4;
   z-index: 2;
} */

/* ############################################################### */

/* Grid and flexbox */

/* The basic difference between CSS Grid Layout and CSS Flexbox Layout is that flexbox was designed for layout in one dimension, layout in a row or a column. Grid was designed for two-dimensional layout, layout in rows and columns at the same time. The two specifications share some common features however and if you have already learned how to use flexbox you will hopefully see similarities that help you get to grips with Grid. */

/* One-dimensional vs. two-dimensional layout

A simple example can demonstrate the difference between one- and two-dimensional layout.

In this first example I am using flexbox to lay out a set of boxes. I have five child items in my container, and I have given the flex properties values so that they can grow and shrink from a flex-basis of 200 pixels.

I have also set the flex-wrap property to wrap, so that if the space in the container becomes too narrow to maintain the flex basis, items will wrap onto a new row.*/

/* .wrapper {
   display: flex;
   flex-wrap: wrap;
}
.wrapper > div {
    background-color: red;
   flex: 1 1 200px;
} */

/* The same layout with CSS grids

In this next example I create the same layout using Grid. This time we have three 1fr column tracks. We do not need to set anything on the items themselves, they will lay themselves out one into each cell of the created grid. As you can see they stay in a strict grid, lining up in rows and columns. With five items, we get a gap on the end of row two.*/

/* .wrapper {
   display: grid;
   grid-template-rows: repeat(3, 1fr);
} */

/* A very simple question to ask yourself when decided between grid or flexbox is:

do I only need to control the layout by row or column – use a flexbox
do I need to control the layout by row and column – use a grid */

/* Content out or layout in? */

/* In addition to the one-dimensional versus two-dimensional distinction, there is another way to decide if you should use flexbox or grid for a layout. Flexbox works from the content out. An ideal use case for flexbox is when you have a set of items and want to space them out evenly in a container. You let the size of the content decide how much individual space each item takes up. If the items wrap onto a new line, they will work out their spacing based on their size and the available space in that line.

Grid works from the layout in. When you use CSS Grid Layout you create a layout and then you place items into it, or you allow the auto-placement rules to place the items into the grid cells according to that strict grid. There is the ability to create tracks that respond to the size of the content, however they will also change the entire track.

If you are using flexbox and find yourself disabling some of the flexibility, you probably need to use CSS Grid Layout. An example would be if you are setting a percentage width on a flex item to make it line up with other items in a row above. In that case a grid is likely to be a better choice.

/* Box alignment */

/* The feature of flexbox that was most exciting to many of us was that it gave us proper alignment control for the first time. It made it easy to center a box on the page. Flex items can stretch to the height of the flex container meaning that equal height columns were possible. These were things we have wanted to do for a very long time, and have come up with all kinds of hacks to at least create the visual effect of.

The alignment properties from the flexbox specification have been added to a new specification called Box Alignment Level 3. This means that they can be used in other specifications, including Grid Layout. In the future they may well apply to other layout methods as well.

In a later guide in this series I’ll be taking a proper look at Box Alignment and how it works in Grid Layout, here however is a simple example comparing flexbox to grid.

The first example uses flexbox, I have a container with three items inside. The wrapper min-height is set, so it is defining the height of the flex container. I have set align-items on the flex container to flex-end so the items will line up at the end of the flex container. I have also set the align-self property on box1 so it will override the default and stretch to the height of the container and on box2 so it aligns to the start of the flex container. */

/* CSS Box Alignment Module Level 3: https://drafts.csswg.org/css-align/ */

/* Box alignment with Flexbox */

/* .wrapper {
   display: flex;
   align-items: flex-end;
   min-height: 200px; 
}
.box1 {
    background-color: red;
   align-self: stretch;
}
.box2 {
    background-color: blue;
   align-self: flex-start;
} */

/* Alignment in CSS Grids

This second example uses a grid to create the same layout, this time we are using the box alignment properties as they apply to a grid layout. So we align to start and end rather than flex-start and flex-end. In the case of a grid layout we are aligning the items inside their grid area, in this case that is a single grid cell, but could be an area made up of several grid cells. */

/* .wrapper {
   display: grid;
   grid-template-columns: repeat(3,1fr);
   align-items: end;
   grid-auto-rows: 800px;
}.box1 {
   align-self: stretch;
   background-color: red;
}
.box2 {
   align-self: start;
   background-color: blue;
}

.box3 {
    background-color: yellow;
} */

/* The fr unit and flex-basis

We have already seen how the fr unit works to assign a proportion of available space in the grid container to our grid tracks. The fr unit, when combined with the minmax function can give us very similar behavior to the flex properties in flexbox - while still enabling the creation of layout in two dimensions.

If we look back at the example where I demonstrated the difference between one and two dimensional layouts, you can see there is a difference between the way the two layout work responsively. With the flex layout, if we drag our window wider and smaller flex box nicely deals with adjusting the number of items in each row according to the available space. If we have a lot of space all five items can fit on one row, if we have a very narrow container we might just have space for one.

In comparison the grid version always has three column tracks, The tracks themselves will grow and shrink, but there are always three as we asked for three when defining our grid.

Auto-filling grid tracks

We can create a similar effect to flexbox, while still keeping the content arranged in strict rows and columns by creating our track listing using repeat notation and the auto-fill and auto-fit properties.

In this next example I have used the auto-fill keyword in place of an integer in the repeat notation and set the track listing to 200 pixels. This means that grid will create as many 200 pixels column tracks as will fit in the container. */

/* .wrapper {
    background-color: green;
   display: grid;
   grid-template-columns: repeat(auto-fill, 100px);
} */

/* A flexible number of tracks

This isn’t quite the same as flexbox, in the flexbox example the items are larger than the 200 pixel basis before wrapping. We can achieve the same in grid by combining auto-fill and the minmax function. In this next example I create auto filled tracks with minmax. I want my tracks to be a minimum of 200 pixels, and I then set the maximum to be 1fr. Once the browser has worked out how many times 200 pixels will fit into the container - also taking account of grid gaps - it will treat the 1fr maximum as an instruction to share out the remaining space between the items. */

/* .wrapper {
    background-color: green;
   display: grid;
   grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
} */

/* ############################################################### */

/* Grid and absolutely positioned elements */

/* Grid interacts with absolutely positioned elements, which can be useful if you want to position an item inside a grid or grid area. The specification defines the behavior when a grid container is a containing block and where the grid container is a parent of the absolutely positioned item.

A grid container as containing block

To make the grid container a containing block you need to add the position property to the container with a value of relative, just as you would to make a containing block for any other absolutely positioned items. Once you have done this, if you give a grid item position: absolute it will take as its containing block the grid container or, if the item also has a grid position, the are of the grid it is placed into.

In the below example I have a wrapper containing four child items, item three is absolutely positioned and also placed on the grid using line-based placement. The grid container has position: relative and so becomes the positioning context of this item.*/

/*.wrapper {
    background-color: red;
   display: grid;
   grid-template-columns: repeat(4,1fr);
   grid-auto-rows: 200px;
   grid-gap: 20px;
   position: relative;
}
.box3 {
    background-color:yellow;
   grid-column-start: 2;
   grid-column-end: 3;
   grid-row-start: 1;
   grid-row-end: 2;
   position: absolute;
   top: 40px;
   left: 40px;
}

/* You can see that the item is taking the area from grid row line 2 to 4, and starting after line 1. Then it is offset in that area using the top and left properties. However, it has been taken out of flow as is usually for absolutely positioned items and so the auto-placement rules now place items into the same space. The item also doesn’t cause the additional row to be created to span to row line 3.

If we remove position: absolute from the rules for .box3 you can see how it would display without the positioning. */

/* A grid container as parent */

/* If the absolutely positioned child has a grid container as a parent but that container does not create a new positioning context, then it is taken out of flow as in the previous example. The positioning context will be whatever element creates a positioning context as is common to other layout methods. In our case if we remove position: relative from the wrapper below, positioning context is from the viewport, as shown in this image.*/

/* .wrapper {
    background-color: red;
   display: grid;
   grid-template-columns: repeat(4,1fr);
   grid-auto-rows: 200px;
   grid-gap: 20px;
   /* position: relative;*/
}
/* .box3 {
    background-color:yellow;
   grid-column-start: 2;
   grid-column-end: 3;
   grid-row-start: 2;
   grid-row-end: 2;
   position: absolute;
   top: 40px; 
   /* left: 40px;*/
}

/* Once again the item no longer participates in the grid layout in terms of sizing or when other items are auto-placed.*/

/* 

/* ############################################################### */

/* With a grid area as the parent */

/* If the absolutely positioned item is nested inside a grid area then you can create a positioning context on that area. In the below example we have our grid as before but this time I have nested an item inside .box3 of the grid.

I have given .box3 position relative and then positioned the sub-item with the offset properties. In this case the positioning context is the grid area. */

* {box-sizing: border-box;}

.wrapper {
   display: grid;
   grid-template-columns: repeat(4,1fr);
   grid-auto-rows: 200px;
   grid-gap: 20px;
}
.box3 {
   grid-column-start: 2;
   grid-column-end: 4;
   grid-row-start: 1;
   grid-row-end: 3;
   position: relative;
}
.abspos {
   position: absolute;
   top: 80px;
   left: 40px;
   background-color: red;
   border: 1px solid rgba(0,0,0,0.5);
   color: #000;
   padding: 10px;
}
